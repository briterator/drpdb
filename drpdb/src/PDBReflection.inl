#ifndef BEGIN_STRUCT
#define BEGIN_STRUCT(...)
#endif

#ifndef MEMBER
#define MEMBER(...)
#endif

#ifndef UNIQUE_MEMBER
#define UNIQUE_MEMBER(A,B) MEMBER(A,B)
#endif

#ifndef END_STRUCT
#define END_STRUCT(...)
#endif

#ifndef BEGIN_ENUMERATION
#define BEGIN_ENUMERATION(...)
#endif

#ifndef END_ENUMERATION
#define END_ENUMERATION(...)
#endif

#ifndef ENUMERATOR
#define ENUMERATOR(...)
#endif
BEGIN_STRUCT(Symbol, symbols, "For the compiler, any name used to identify coding constructs (such as a variable, function, structure, enumeration, constant, class, method, property, and so on) and memory locations within an application.", Sym::TableType::Master)
	MEMBER(name, "A description of the symbol")
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(lexical_parent_symbol, "The region of source code in which a symbol (or identifier) is considered valid; that is, a namespace, file, function, block of code, or function prototype.")
	MEMBER(parent_symbol, "Logical parent of the symbol")
	MEMBER(size, "Size of the symbol in bytes")
	MEMBER(tag, "Codeview symbol type")
	MEMBER(location_type, "Type of addressing to use when looking up this symbol in the executable")
END_STRUCT()
BEGIN_STRUCT(BuiltinType, builtins, "Describes qualified builtin types (`const bool`, `volatile int`, etc) used in the program.", Sym::TableType::Data)
		UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
		MEMBER(kind, "The language builtin type")
		MEMBER(unaligned, "The type does not follow normal alignment rules")
		MEMBER(const_, "The type is	`const` qualified")
		MEMBER(volatile_, "The type is `volatile` qualified")
		MEMBER(const_export, "Symbol is both exported and const")
END_STRUCT()
BEGIN_STRUCT(Frame, frames, "Details of a stack frame", Sym::TableType::Function)
	MEMBER(program, "Program string that is used to compute the register set before the call to the current function")
	MEMBER(address, "Virtual address of the code for the frame")
	MEMBER(length_block, "Number of bytes of the block of code described by the frame")
	MEMBER(length_locals, "Number of bytes of local variables pushed on the stack")
	MEMBER(length_params, "Number of bytes of parameters pushed on the stack")
	MEMBER(max_stack, "The maximum number of bytes pushed on the stack in the frame")
	MEMBER(length_prolog, "Number of bytes of prologue code on the block")
	MEMBER(length_saved_registers, "Number of bytes of saved registers pushed on the stack")
	MEMBER(type_symbol, "Compiler-specific frame type")
	MEMBER(exceptions_system, "System exception handling is in effect")
	MEMBER(exceptions_cxx, "C++ exception handling is in effect")
	MEMBER(function_start, "Block contains entry point of a function")
	MEMBER(allocate_base_pointer, "Base pointer is allocated for code in this range (deprecated)")
END_STRUCT()
BEGIN_STRUCT(Label, labels, "A location in code (used by e.g. goto)", Sym::TableType::Function)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(address, "Relative position of this label within its module")
END_STRUCT()
BEGIN_STRUCT(FunctionType, function_types, "Each unique function signature is identified by a function type. Each parameter is identified as a class child symbol with a FunctionArg tag.", Sym::TableType::Function)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(volatile_, "The function is marked as `volatile`")
	MEMBER(const_, "The function is marked as `const`")
	MEMBER(unaligned, "The function is unaligned")
	MEMBER(this_adjust, "Logical `this` adjustor for the method")
	MEMBER(param_count, "Number of parameters for this function")
	MEMBER(is_constructor, "The function represents a constructor")
	MEMBER(return_type_symbol, "*symbols* table entry for the type of the `return` value")
	MEMBER(this_type_symbol, "*symbols* table entry for the type of `this`")
	MEMBER(cxx_return_udt, "Function returns a C++ `struct`/`class`/`union`")
	MEMBER(constructor_virtual_base, "Constructor requires adjustments for `virtual` base classes")
	MEMBER(constant_export, "")
	MEMBER(call_convention, "[Calling convention](https://msdn.microsoft.com/en-us/library/k2b2ssfy.aspx) for this function")
END_STRUCT()
BEGIN_STRUCT(Function, functions, "Provides information about functions", Sym::TableType::Function)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(virtual_base_offset, "")
	MEMBER(type_symbol, "*symbols* table entry for the function signature (see *function_types* table)")
	MEMBER(access, "`private`, `public`, `protected`, or none")
	MEMBER(virtuality, "Is a virtual override, virtual introducer, or non-virtual")
	MEMBER(pgo_dyn_instr_count, "Instruction counter used by profile-guided optimization")
	MEMBER(static_size, "")
	MEMBER(pbp_regid, "Parameter base pointer register ID")
	MEMBER(lbp_regid, "Local base pointer register ID")
	MEMBER(final_live_static_size, "")
	MEMBER(frame_size, "Size of the function's stack frame")
	MEMBER(address, "Relative virtual address of the function")
	MEMBER(eh_address, "Relative virtual address of the function's exception handler")
	MEMBER(pgo_entry_count, "Function call counter used by profile-guided optimization")
	MEMBER(control_flow_check, "See https://msdn.microsoft.com/en-us/library/windows/desktop/mt637065(v=vs.85).aspx")
	MEMBER(exceptions, "Exceptions are enabled")
	MEMBER(sealed, "Is `sealed` or `final`")
	MEMBER(security_checks, "See https://msdn.microsoft.com/en-us/library/8dbf701c.aspx")
	MEMBER(static_, "Is `static`")
	MEMBER(pure_virtual, "`virtual` function has `=0` specifier")
	MEMBER(inline_, "Declared `inline`")
	MEMBER(inlined, "Can actually be inlined")
	MEMBER(noinline, "Declared [`__declspec(noinline)`](https://msdn.microsoft.com/en-us/library/kxybs02x.aspx)")
	MEMBER(noreturn, "Declared [`__declspec(noreturn)`](https://msdn.microsoft.com/en-us/library/k6ktzx3s.aspx)")
	MEMBER(unreachable, "")
	MEMBER(setjmp_, "Contains a `setjmp` instruction")
	MEMBER(asm_, "Includes inline assembly")
	MEMBER(alloca_, "Uses `alloca`")
	MEMBER(const_export, "Symbol is both exported and const")
	MEMBER(strict_gs_check, "If function uses [#pragma strict_gs_check](https://msdn.microsoft.com/en-us/library/bb507721.aspx)")
	MEMBER(longjmp, "If function uses `longjmp` instruction" )
	MEMBER(eh, "Compiled with [/EH](https://msdn.microsoft.com/en-us/library/1deeycx5.aspx)")
	MEMBER(eha, "Compiled with [/EHa](https://msdn.microsoft.com/en-us/library/1deeycx5.aspx)")
	MEMBER(seh, "Contains [structured exception handling](https://msdn.microsoft.com/en-us/library/windows/desktop/ms680657(v=vs.85).aspx)")
	MEMBER(optimized_debug_info, "")
	MEMBER(frame_pointer, "Contains a [frame pointer](https://msdn.microsoft.com/en-us/library/2kxx5t2c.aspx)")
	MEMBER(interrupt_return, "")
	MEMBER(far_return, "")
	MEMBER(naked, "Declared [`__declspec(naked)`](https://msdn.microsoft.com/en-us/library/h5w10wxs.aspx)")
	MEMBER(custom_call, "Optimizer has created a custom calling convention for optimization purposes")
	MEMBER(stack_ordering, "Stack ordering could not be done for [/GS](https://technet.microsoft.com/en-us/library/8dbf701c)")
	MEMBER(safebuffers, "Declared [`__declspec(safebuffers)`](https://msdn.microsoft.com/en-us/library/dd778695.aspx)")
	MEMBER(pgo, "Compiled with profile guided optimization")
	MEMBER(has_pgo_counts, "Describes whether or not the pgo counters contain valid data")
	MEMBER(optimized_for_speed, "Compiled to be optimized for speed")
	MEMBER(compiler_generated, "Was generated by the compiler")
END_STRUCT()

BEGIN_STRUCT(VTablePtr, vtable_pointers, "Represents a pointer to a table of virtual functions", Sym::TableType::Data)
	MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(offset, "Location of the pointer in the class")
	MEMBER(type_symbol, "Corresponding *vtables* table entry")
END_STRUCT()

BEGIN_STRUCT(VTableShape, vtables, "Represents a table of virtual functions", Sym::TableType::Data)
	MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(count, "Number of entries in the VTable")
END_STRUCT()

BEGIN_STRUCT(Friend, friends, "Describes `friend` relationships among data types", Sym::TableType::Data)
	MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(type_symbol, "*symbols* table entry for the befriended type")
END_STRUCT()

BEGIN_STRUCT(PublicSymbol, public_symbols, "Describes symbols which are visible to multiple translation units. These symbols force additional work onto the linker", Sym::TableType::Master)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(type, "DATA or FUNCTION")
	MEMBER(address, "Relative virtual address of the symbol")
	MEMBER(managed, "Is a managed symbol")
	MEMBER(cil, "Defined in the [Common Intermediate Language](https://en.wikipedia.org/wiki/Common_Intermediate_Language)")
END_STRUCT()
BEGIN_STRUCT(Data, data, "Describes global variables, local variables, and member data", Sym::TableType::Master)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(value, "Numeric value of the data")
	MEMBER(type_symbol, "*symbols* table entry for the data type")
	MEMBER(offset, "Offset of the data (for eg. data members)")
	MEMBER(address, "Address of the data")
	MEMBER(register_id, "Register for the data object")
	MEMBER(bit_position, "Position for bitfield data")
	MEMBER(kind, "Where the data is stored")
	MEMBER(const_export, "Symbol is both exported and const")
END_STRUCT()
BEGIN_STRUCT(Compiland, compilands, "Describes the translation units/source files used to compile the program", Sym::TableType::Files)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(library, "Path to the .obj file")
	MEMBER(compiler, "Compiler that generated the .obj file")
	MEMBER(backend_build, "compiler version")
	MEMBER(backend_major, "compiler version")
	MEMBER(backend_minor, "compiler version")
	MEMBER(frontend_build, "compiler version")
	MEMBER(frontend_major, "compiler version")
	MEMBER(frontend_minor, "compiler version")
	MEMBER(frontend_qfe, "compiler version")
	MEMBER(backend_qfe, "compiler version")
	MEMBER(language, "Language of the source file")
	MEMBER(platform, "Architecture the file was compiled for")
	MEMBER(security_check, "Compiled with [/GS](https://msdn.microsoft.com/en-us/library/8dbf701c.aspx)")
	MEMBER(managed, "Source language is managed")
	MEMBER(debug_info, "If the .obj file has debug information available")
	MEMBER(edit_and_continue, "File was compiled with edit and continue support")
	MEMBER(ltcg, "File was compiled for link-time code generation")
	MEMBER(sdl, "Compiled with [/sdl](https://msdn.microsoft.com/en-us/library/jj161081.aspx)")
	MEMBER(pgo, "Compiled for profile guided optimization")
	MEMBER(data_aligned, "")
	MEMBER(hotpatchable, "contains extra nop instructions to facilitate [hotpatching](https://msdn.microsoft.com/en-us/library/ms173507.aspx)")
	MEMBER(cvtcil, "Module was coverted from Common Intermediate Language module to native module via `link /cvtcil`")
	MEMBER(cil_netmodule, "See the definition of [Netmodule](https://blogs.msdn.microsoft.com/junfeng/2005/02/12/netmodule-vs-assembly/)")
END_STRUCT()

BEGIN_STRUCT(InjectedSource, injected_src, "Code that has been placed into the symbol store by attribute providers or other components of the compilation process. May also refer to code that is generated automatically by the compiler and/or linker.", Sym::TableType::Function)
	MEMBER(length, "")
	MEMBER(text, "")
END_STRUCT()

BEGIN_STRUCT(SourceFile, src_files, "Describes source code files used in the program", Sym::TableType::Files)
	UNIQUE_MEMBER(source_id, "Primary key used as a unique identifier")
	MEMBER(path, "Location of the file on disk")
END_STRUCT()

BEGIN_STRUCT(SrcRange, src_lines, "Used to map symbols to the location they occur in the source code", Sym::TableType::Files)
	UNIQUE_MEMBER(id, "Primary key used as a unique identifier")
	MEMBER(compiland_symbol, "*symbols* table entry for the compiland")
	MEMBER(src_file, "*src_files* table entry for the source file")
	MEMBER(line_begin, "Beginning line number")
	MEMBER(line_end, "Ending line number (or 0)")
	MEMBER(column_begin, "Beginning column number (or 0)")
	MEMBER(column_end, "Ending column number (or 0)")
	MEMBER(address_rv, "Relative virtual address of the source line")
	MEMBER(address_offset, "Address offset within the section")
	MEMBER(address_section, "*section* table entry for the section this is in")
	MEMBER(length, "Length of the line")
	MEMBER(statement, "Is a statement")
END_STRUCT()

BEGIN_STRUCT(InputAssembly, input_assemblies, "", Sym::TableType::Files)
	MEMBER(filename, "Filename of the input assembly")
	MEMBER(index_, "")
	MEMBER(timestamp, "Timestamp for when the assembly was compiled")
	MEMBER(uid, "Assembly UID")
	MEMBER(pdb_available_at_il_merge, "")
END_STRUCT()

BEGIN_STRUCT(CompilandEnv, compiland_env, "Describes information about the environment in which a compiland was compiled", Sym::TableType::Files)
	MEMBER(compiland_symbol, "*symbols* table entry for the compiland")
	MEMBER(option_name, "Name of the option being set (key)")
	MEMBER(value, "Value of the option that was set")
END_STRUCT()

BEGIN_STRUCT(AddrSection, sections, "Describes the sections of the executable", Sym::TableType::Files)
	UNIQUE_MEMBER(section_index, "Primary key for this table")
	MEMBER(size, "size of the section in bytes")
	MEMBER(line_numbers, "If data is available")
	MEMBER(name, "Name of the section")
	MEMBER(relocations, "If relocations are present")
	MEMBER(comdat, "If this section is a comdat")
	MEMBER(executable, "If this section contains executable instructions")
	MEMBER(readable, "If this data is readable")
	MEMBER(writable, "If this data is writable")
	MEMBER(discardable, "If this data is discardable")
END_STRUCT()

BEGIN_STRUCT(Included, included, "Records direct and indirect `#include`s occurring from source files", Sym::TableType::Files)
	MEMBER(compiland_symbol, "*symbols* table entry for the translation unit")
	MEMBER(source_id, "*src_files* table entry that was included")
END_STRUCT()

BEGIN_STRUCT(UserType, user_types, "Describes `class`es, `union`s, and `struct`s in the program", Sym::TableType::Data)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(src_line, "*src_lines* table entry for the declaration site")
	MEMBER(vtable_shape, "*symbols* table entry for the vtable")
	MEMBER(vtable_count, "Number of functions in the vtable")
	MEMBER(kind, "`union`, `class`, or `struct`")
	MEMBER(semantics, "In managed languages, this defines the type semantics")
	MEMBER(aggregate_type, "Used by the auto-vectorizer to detect vector-like types")
	MEMBER(packed, "Uses [#pragma pack](https://msdn.microsoft.com/en-us/library/2e70t5y1.aspx)")
	MEMBER(unaligned, "structure is unaligned")
	MEMBER(const_, "")
	MEMBER(volatile_, "")
	MEMBER(overloaded_operators, "contains overloaded operators")
	MEMBER(nested, "is a nested class")
	MEMBER(has_nested_types, "contains nested classes")
	MEMBER(assignment_operator, "has an assignment operator")
	MEMBER(cast_operator, "has a cast/conversion operator")
	MEMBER(scoped, "occurs in a non-global lexical scope")
	MEMBER(constructor, "has a user-defined (not compiler-generated) constructor")
END_STRUCT()

BEGIN_STRUCT(Enum, enumerations, "Describes `enum`s in the program. Values of the enum may be observed in the *data* table", Sym::TableType::Data)
UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(unmodified_type_symbol, "*symbols* table entry for the unqualified underlying type")
	MEMBER(type_symbol, "*symbols* table entry for the underlying type")
	MEMBER(type, "Builtin underlying base type of the enum")
	MEMBER(packed, "Uses C++/CLI [underlying types](https://msdn.microsoft.com/en-us/library/a6cskb49.aspx)")
	MEMBER(scoped, "Occurs in a nonglobal lexical scope")
END_STRUCT()

BEGIN_STRUCT(Pointer, pointers, "Describes qualified pointer types in the program", Sym::TableType::Data)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(type_symbol, "*symbols* table entry for the qualified type pointed to")
	MEMBER(unmodified_type_symbol, "*symbols* table entry for the unqualified type pointed to")
	MEMBER(unaligned, "")
	MEMBER(kind, "pointer, lvalue reference, or rvalue reference")
	MEMBER(inheritance, "")
	MEMBER(member_type, "Is a member pointer")
	MEMBER(const_, "Is a const T*")
	MEMBER(volatile_, "Is a volatile T*")
	MEMBER(restrict_, "Declared with [`__declspec(restrict)`](https://msdn.microsoft.com/en-us/library/5ft82fed.aspx)")
	MEMBER(constant_export, "")
	MEMBER(virtual_inheritance, "")
END_STRUCT()

BEGIN_STRUCT(BaseClass, base_classes, "Describes the class inheritance hierarchy", Sym::TableType::Data )
	MEMBER(child_symbol, "*symbols* table entry for the child class")
	MEMBER(parent_symbol, "*symbols* table entry for the parent class")
	MEMBER(offset, "Physical offset of the parent (base) class into the child class")
	MEMBER(vdisp_index, "Displacement within the vbase table")
	MEMBER(vbase_type_symbol, "*symbols* table entry for the type of the virtual base table")
	MEMBER(vbase_offset, "offset to the virtual base table pointer")
	MEMBER(virtual_, "Uses direct `virtual` inheritance")
	MEMBER(indirect_virtual, "Uses indirect `virtual` inheritance")
	MEMBER(access, "`public`, `private`, or `protected`")
END_STRUCT()

BEGIN_STRUCT(Thunk, thunks, "Code that performs a translation or conversion during a call or indirection. For example, a thunk may be used to change the size or type of function parameters when passing data between 16-bit and 32-bit code.", Sym::TableType::Function)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(ordinal, "The type of thunk")
	MEMBER(address, "Address of the thunk")
	MEMBER(target, "Address of the thunk target (destination)")
	MEMBER(target_symbol, "*symbols* table entry for the thunk target")
END_STRUCT()

BEGIN_STRUCT(FunctionArg, arguments, "Each function argument has an entry in this table. The corresponding function is recorded in *symbols.parent_symbol*", Sym::TableType::Function)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(type_symbol, "*symbols* table entry for the type of the argument")
END_STRUCT()

BEGIN_STRUCT(Block, blocks, "Lexical scopes {} in the program", Sym::TableType::Function)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(address, "Address of the block")
END_STRUCT()

BEGIN_STRUCT(HeapAllocation, heap_allocs, "Heap allocations tracking inserted by CL's [profiling support](https://blogs.msdn.microsoft.com/vcblog/2015/10/21/memory-profiling-in-visual-c-2015/)", Sym::TableType::Function)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(address, "Address of the heap allocation")
	MEMBER(type_symbol, "*symbols* table entry for the type of object being allocated")
END_STRUCT()

BEGIN_STRUCT(Export, exports, "Symbols which can be accessed by external executables. `dllexport` or [/EXPORT](https://msdn.microsoft.com/en-us/library/7k30y2k5.aspx)", Sym::TableType::Master)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(address_offset, "Address offset of the export")
	MEMBER(rank, "Rank of a FORTRAN multidimensional array")
	MEMBER(ordinal, "Index into the [export table](https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513/)")
	MEMBER(const_export, "Symbol is both exported and const")
	MEMBER(data_export, "Export represents data")
	MEMBER(private_export, "Export is private to the executable")
	MEMBER(noname, "Export name was stripped by NONAME statement in .def file" )
	MEMBER(explicit_ordinal, "Export table index was assigned by hand rather than automatically generated")
	MEMBER(forwarder, "Function linkage is [redirected](https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473) to another dll")
	MEMBER(function_, "Is a function")
	MEMBER(const_, "Is `const`")
END_STRUCT()

BEGIN_STRUCT(Exe, executable, "The top-most level of the executable image", Sym::TableType::Files)
	MEMBER(guid, "The executable's globally unique identifier")
	MEMBER(symbols_path, "File path for the executable's .PDB")
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(age, "")
	MEMBER(ctypes, "")
	MEMBER(stripped, "private symbols have been [stripped](https://msdn.microsoft.com/en-us/library/y87kw2fd.aspx)")
	MEMBER(architecture, "CPU architecture that the executable was compiled for")
	MEMBER(signature, "A crc or other signature for the executable")
END_STRUCT()

BEGIN_STRUCT(Typedef, typedefs, "Records `typedef`s used in the program", Sym::TableType::Data)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(type_symbol, "*symbols* table entry for the qualified type being aliased")
	MEMBER(unmodified_type_symbol, "*symbols* table entry for the unqualified type being aliased")
END_STRUCT()
BEGIN_STRUCT(SectionContrib, section_contrib, "Describes ranges of data within each section", Sym::TableType::Files)
	MEMBER(compiland_symbol, "Corresponding *compilands* table entry")
	MEMBER(data_crc, "CRC of the data segment")
	MEMBER(length, "Length of the section contribution")
	MEMBER(address, "Address of the section contribution")
	MEMBER(relocations_crc, "CRC of the relocations information")
	MEMBER(code, "Contains code")
	MEMBER(code_16bit, "Contains code for 16 bit platforms")
	MEMBER(comdat, "is a comdat")
	MEMBER(executable, "Contains executable data")
	MEMBER(discardable, "Contains discardable debug info")
	MEMBER(initialized_data, "Contains initialized data")
	MEMBER(uninitialized_data, "Contains uninitialized data")
	MEMBER(cached, "Must be cached")
	MEMBER(paged, "Is paged")
	MEMBER(readable, "Contains readable data")
	MEMBER(writeable, "Contains writable data")
	MEMBER(remove, "")
	MEMBER(share, "")
END_STRUCT()
BEGIN_STRUCT(Inlined, inlined, "Describes locations where code has been inlined", Sym::TableType::Files)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(type_symbol, "")
	MEMBER(pgo_edges, "Used by profile-guided optimization")
	MEMBER(address, "Address of the inline site")
END_STRUCT()
BEGIN_STRUCT(Array, arrays, "Describes c-style array[]s in the program", Sym::TableType::Data)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(index_type_symbol, "*symbols* table entry for the type of the array's index")
	MEMBER(count, "Length of the array")
	MEMBER(rank, "FORTRAN array rank")
	MEMBER(type_symbol, "*symbols* table entry for the type of the array's elements")
END_STRUCT()
BEGIN_STRUCT(Segment, segments, "Listing of the [segments](https://msdn.microsoft.com/en-us/library/ms809762.aspx) of the executable", Sym::TableType::Files)
	MEMBER(address_rv, "Address of the segment")
	MEMBER(address_section, "Corresponding section for the segment address")
	MEMBER(frame, "Index of the segment")
	MEMBER(length, "Size of the segment")
	MEMBER(offset, "")
	MEMBER(executable, "Contains executable bytes")
	MEMBER(readable, "Contains readable bytes")
	MEMBER(writable, "Contains writable byts")
END_STRUCT()
BEGIN_STRUCT(Callsite, calls, "Listing of function call sites in the program", Sym::TableType::Function)
	UNIQUE_MEMBER(symbol, "Corresponding *symbols* table entry")
	MEMBER(target_symbol, "*symbols* table entry for the function being called")
	MEMBER(address, "Address of the function call")
END_STRUCT()
BEGIN_ENUMERATION(PublicSymbol::Type)
	ENUMERATOR(PublicSymbol::Type, FUNCTION)
	ENUMERATOR(PublicSymbol::Type, DATA)
	ENUMERATOR(PublicSymbol::Type, OTHER)
END_ENUMERATION()
BEGIN_ENUMERATION(AddrSection::Kind)
	ENUMERATOR(AddrSection::Kind, UNKNOWN)
	ENUMERATOR(AddrSection::Kind, DATA)
	ENUMERATOR(AddrSection::Kind, BSS)
	ENUMERATOR(AddrSection::Kind, CODE)
	ENUMERATOR(AddrSection::Kind, READDATA)
END_ENUMERATION()
 
BEGIN_ENUMERATION(Language)
	ENUMERATOR(Language, C)
	ENUMERATOR(Language, CXX)
	ENUMERATOR(Language, FORTRAN)
	ENUMERATOR(Language, MASM)
	ENUMERATOR(Language, PASCAL)
	ENUMERATOR(Language, BASIC)
	ENUMERATOR(Language, COBOL)
	ENUMERATOR(Language, LINK)
	ENUMERATOR(Language, CVTRES)
	ENUMERATOR(Language, CVTPGD)
	ENUMERATOR(Language, CSHARP)
	ENUMERATOR(Language, VB)
	ENUMERATOR(Language, ILASM)
	ENUMERATOR(Language, JAVA)
	ENUMERATOR(Language, JS)
	ENUMERATOR(Language, CIL)
	ENUMERATOR(Language, HLSL)
END_ENUMERATION()
BEGIN_ENUMERATION(UserType::Semantics)
	ENUMERATOR(UserType::Semantics, UNKNOWN)
	ENUMERATOR(UserType::Semantics, VALUE)
	ENUMERATOR(UserType::Semantics, REFERENCE)
	ENUMERATOR(UserType::Semantics, INTERFACE)
END_ENUMERATION();
BEGIN_ENUMERATION(Thunk::Ordinal)
	ENUMERATOR(Thunk::Ordinal, NONE)
	ENUMERATOR(Thunk::Ordinal, THIS_ADJUSTOR)
	ENUMERATOR(Thunk::Ordinal, VIRTUAL_CALL)
	ENUMERATOR(Thunk::Ordinal, PCODE)
	ENUMERATOR(Thunk::Ordinal, DELAY_LOAD)
	ENUMERATOR(Thunk::Ordinal, TRAMPOLINE_INCREMENTAL)
	ENUMERATOR(Thunk::Ordinal, TRAMPOLINE_BRANCHISLAND)
END_ENUMERATION()

BEGIN_ENUMERATION(Tag)
	ENUMERATOR(Tag, Unknown)
	ENUMERATOR(Tag, Exe)
	ENUMERATOR(Tag, Compiland)
	ENUMERATOR(Tag, CompilandDetails)
	ENUMERATOR(Tag, CompilandEnv)
	ENUMERATOR(Tag, Function)
	ENUMERATOR(Tag, Block)
	ENUMERATOR(Tag, Data)
	ENUMERATOR(Tag, Annotation)
	ENUMERATOR(Tag, Label)
	ENUMERATOR(Tag, PublicSymbol)
	ENUMERATOR(Tag, UDT)
	ENUMERATOR(Tag, Enum)
	ENUMERATOR(Tag, FunctionType)
	ENUMERATOR(Tag, PointerType)
	ENUMERATOR(Tag, ArrayType)
	ENUMERATOR(Tag, BaseType)
	ENUMERATOR(Tag, Typedef)
	ENUMERATOR(Tag, BaseClass)
	ENUMERATOR(Tag, Friend)
	ENUMERATOR(Tag, FunctionArgType)
	ENUMERATOR(Tag, FuncDebugStart)
	ENUMERATOR(Tag, FuncDebugEnd)
	ENUMERATOR(Tag, UsingNamespace)
	ENUMERATOR(Tag, VTableShape)
	ENUMERATOR(Tag, VTable)
	ENUMERATOR(Tag, Custom)
	ENUMERATOR(Tag, Thunk)
	ENUMERATOR(Tag, CustomType)
	ENUMERATOR(Tag, ManagedType)
	ENUMERATOR(Tag, Dimension)
	ENUMERATOR(Tag, CallSite)
	ENUMERATOR(Tag, InlineSite)
	ENUMERATOR(Tag, BaseInterface)
	ENUMERATOR(Tag, VectorType)
	ENUMERATOR(Tag, MatrixType)
	ENUMERATOR(Tag, HLSLType)
	ENUMERATOR(Tag, Caller)
	ENUMERATOR(Tag, Callee)
	ENUMERATOR(Tag, Export)
	ENUMERATOR(Tag, HeapAllocationSite)
	ENUMERATOR(Tag, CoffGroup)
	ENUMERATOR(Tag, Max)
END_ENUMERATION()
BEGIN_ENUMERATION(Data::Kind)
	ENUMERATOR(Data::Kind, UNKNOWN)
	ENUMERATOR(Data::Kind, LOCAL)
	ENUMERATOR(Data::Kind, STATICLOCAL)
	ENUMERATOR(Data::Kind, PARAM)
	ENUMERATOR(Data::Kind, OBJECTPTR)
	ENUMERATOR(Data::Kind, FILESTATIC)
	ENUMERATOR(Data::Kind, GLOBAL)
	ENUMERATOR(Data::Kind, MEMBER)
	ENUMERATOR(Data::Kind, STATICMEMBER)
	ENUMERATOR(Data::Kind, CONSTANT)
END_ENUMERATION()

BEGIN_ENUMERATION(BuiltinType::Kind)
	ENUMERATOR(BuiltinType::Kind, NONE)
	ENUMERATOR(BuiltinType::Kind, VOID)
	ENUMERATOR(BuiltinType::Kind, CHAR)
	ENUMERATOR(BuiltinType::Kind, WCHAR)
	ENUMERATOR(BuiltinType::Kind, INT)
	ENUMERATOR(BuiltinType::Kind, UINT)
	ENUMERATOR(BuiltinType::Kind, FLOAT)
	ENUMERATOR(BuiltinType::Kind, BCD)
	ENUMERATOR(BuiltinType::Kind, BOOL)
	ENUMERATOR(BuiltinType::Kind, LONG)
	ENUMERATOR(BuiltinType::Kind, ULONG)
	ENUMERATOR(BuiltinType::Kind, CURRENCY)
	ENUMERATOR(BuiltinType::Kind, DATE)
	ENUMERATOR(BuiltinType::Kind, VARIANT)
	ENUMERATOR(BuiltinType::Kind, COMPLEX)
	ENUMERATOR(BuiltinType::Kind, BIT)
	ENUMERATOR(BuiltinType::Kind, BSTR)
	ENUMERATOR(BuiltinType::Kind, HRESULT)
	ENUMERATOR(BuiltinType::Kind, CHAR16) 
	ENUMERATOR(BuiltinType::Kind, CHAR32) 
END_ENUMERATION()
BEGIN_ENUMERATION(FunctionType::CallConv)
	ENUMERATOR(FunctionType::CallConv, NEAR_C) 
	ENUMERATOR(FunctionType::CallConv, FAR_C) 
	ENUMERATOR(FunctionType::CallConv, NEAR_PASCAL) 
	ENUMERATOR(FunctionType::CallConv, FAR_PASCAL) 
	ENUMERATOR(FunctionType::CallConv, NEAR_FAST) 
	ENUMERATOR(FunctionType::CallConv, FAR_FAST) 
	ENUMERATOR(FunctionType::CallConv, SKIPPED) 
	ENUMERATOR(FunctionType::CallConv, NEAR_STD) 
	ENUMERATOR(FunctionType::CallConv, FAR_STD) 
	ENUMERATOR(FunctionType::CallConv, NEAR_SYS) 
	ENUMERATOR(FunctionType::CallConv, FAR_SYS) 
	ENUMERATOR(FunctionType::CallConv, THISCALL) 
	ENUMERATOR(FunctionType::CallConv, MIPSCALL) 
	ENUMERATOR(FunctionType::CallConv, GENERIC) 
	ENUMERATOR(FunctionType::CallConv, ALPHACALL) 
	ENUMERATOR(FunctionType::CallConv, PPCCALL) 
	ENUMERATOR(FunctionType::CallConv, SHCALL) 
	ENUMERATOR(FunctionType::CallConv, ARMCALL) 
	ENUMERATOR(FunctionType::CallConv, AM33CALL) 
	ENUMERATOR(FunctionType::CallConv, TRICALL) 
	ENUMERATOR(FunctionType::CallConv, SH5CALL) 
	ENUMERATOR(FunctionType::CallConv, M32RCALL) 
	ENUMERATOR(FunctionType::CallConv, CLRCALL) 
	ENUMERATOR(FunctionType::CallConv, INLINE) 
	ENUMERATOR(FunctionType::CallConv, NEAR_VECTOR) 
	ENUMERATOR(FunctionType::CallConv, RESERVED)
END_ENUMERATION()
BEGIN_ENUMERATION(UserType::Kind)
	ENUMERATOR(UserType::Kind, STRUCT)
	ENUMERATOR(UserType::Kind, CLASS)
	ENUMERATOR(UserType::Kind, UNION)
	ENUMERATOR(UserType::Kind, INTERFACE)
END_ENUMERATION()
BEGIN_ENUMERATION(UserType::Aggregate)
	ENUMERATOR(UserType::Aggregate, NONE)
	ENUMERATOR(UserType::Aggregate, HOMOG_FLOAT)
	ENUMERATOR(UserType::Aggregate, HOMOG_DOUBLE)
END_ENUMERATION()
BEGIN_ENUMERATION(Pointer::Kind)
	ENUMERATOR(Pointer::Kind, PTR)
	ENUMERATOR(Pointer::Kind, L_REF)
	ENUMERATOR(Pointer::Kind, R_REF)
	ENUMERATOR(Pointer::Kind, WINRT_HAT)
END_ENUMERATION()
BEGIN_ENUMERATION(Pointer::Inheritance)
	ENUMERATOR(Pointer::Inheritance, NONE)
	ENUMERATOR(Pointer::Inheritance, SINGLE)
	ENUMERATOR(Pointer::Inheritance, MULTIPLE)
END_ENUMERATION()

BEGIN_ENUMERATION(Pointer::MemberType)
	ENUMERATOR(Pointer::MemberType, NONE)
	ENUMERATOR(Pointer::MemberType, DATA)
	ENUMERATOR(Pointer::MemberType, FUNCTION)
END_ENUMERATION()

BEGIN_ENUMERATION(Function::Virtuality)
	ENUMERATOR(Function::Virtuality, INTRO)
	ENUMERATOR(Function::Virtuality, OVERRIDE)
	ENUMERATOR(Function::Virtuality, NONE)
END_ENUMERATION()
BEGIN_ENUMERATION(Access)
	ENUMERATOR(Access, NONE)
	ENUMERATOR(Access, PRIVATE)
	ENUMERATOR(Access, PUBLIC)
	ENUMERATOR(Access, PROTECTED)
END_ENUMERATION()
BEGIN_ENUMERATION(CPU)
	ENUMERATOR(CPU, I8080)
	ENUMERATOR(CPU, I8086)
	ENUMERATOR(CPU, I80286)
	ENUMERATOR(CPU, I80386)
	ENUMERATOR(CPU, I80486)
	ENUMERATOR(CPU, PENTIUM)
	ENUMERATOR(CPU, PENTIUMII)
	ENUMERATOR(CPU, PENTIUMIII)
	ENUMERATOR(CPU, MIPS)
	ENUMERATOR(CPU, MIPS16)
	ENUMERATOR(CPU, MIPS32)
	ENUMERATOR(CPU, MIPS64)
	ENUMERATOR(CPU, MIPSI)
	ENUMERATOR(CPU, MIPSII)
	ENUMERATOR(CPU, MIPSIII)
	ENUMERATOR(CPU, MIPSIV)
	ENUMERATOR(CPU, MIPSV)
	ENUMERATOR(CPU, M68000)
	ENUMERATOR(CPU, M68010)
	ENUMERATOR(CPU, M68020)
	ENUMERATOR(CPU, M68030)
	ENUMERATOR(CPU, M68040)
	ENUMERATOR(CPU, ALPHA_21064)
	ENUMERATOR(CPU, ALPHA_21164)
	ENUMERATOR(CPU, ALPHA_21164A)
	ENUMERATOR(CPU, ALPHA_21264)
	ENUMERATOR(CPU, ALPHA_21364)
	ENUMERATOR(CPU, PPC601)
	ENUMERATOR(CPU, PPC603)
	ENUMERATOR(CPU, PPC604)
	ENUMERATOR(CPU, PPC620)
	ENUMERATOR(CPU, PPCFP)
	ENUMERATOR(CPU, PPCBE)
	ENUMERATOR(CPU, SH3)
	ENUMERATOR(CPU, SH3E)
	ENUMERATOR(CPU, SH3DSP)
	ENUMERATOR(CPU, SH4)
	ENUMERATOR(CPU, SHMEDIA)
	ENUMERATOR(CPU, ARM3)
	ENUMERATOR(CPU, ARM4)
	ENUMERATOR(CPU, ARM4T)
	ENUMERATOR(CPU, ARM5)
	ENUMERATOR(CPU, ARM5T)
	ENUMERATOR(CPU, ARM6)
	ENUMERATOR(CPU, ARM_XMAC)
	ENUMERATOR(CPU, ARM_WMMX)
	ENUMERATOR(CPU, ARM7)
	ENUMERATOR(CPU, OMNI)
	ENUMERATOR(CPU, IA64_1)
	ENUMERATOR(CPU, IA64_2)
	ENUMERATOR(CPU, CEE)
	ENUMERATOR(CPU, AM33)
	ENUMERATOR(CPU, M32R)
	ENUMERATOR(CPU, TRICORE)
	ENUMERATOR(CPU, X64)
	ENUMERATOR(CPU, EBC)
	ENUMERATOR(CPU, THUMB)
	ENUMERATOR(CPU, ARMNT)
	ENUMERATOR(CPU, ARM64)
	ENUMERATOR(CPU, D3D11_SHADER)
END_ENUMERATION()
BEGIN_ENUMERATION(Location)
	ENUMERATOR(Location, NONE)
	ENUMERATOR(Location, STATIC)
	ENUMERATOR(Location, TLS)
	ENUMERATOR(Location, REGREL)
	ENUMERATOR(Location, THISREL)
	ENUMERATOR(Location, ENREGISTERED)
	ENUMERATOR(Location, BITFIELD)
	ENUMERATOR(Location, SLOT)
	ENUMERATOR(Location, ILREL)
	ENUMERATOR(Location, METADATA)
	ENUMERATOR(Location, CONSTANT)
END_ENUMERATION()

#undef BEGIN_STRUCT
#undef UNIQUE_MEMBER
#undef MEMBER
#undef END_STRUCT
#undef BEGIN_ENUMERATION
#undef END_ENUMERATION
#undef ENUMERATOR